#we apply the same using kubectl apply -f deploy.yaml
apiVersion: apps/v1 #it will start taking to the kubernets api called as apps/v1
kind: Deployment #it will invoke deployment api
metadata:
  name: redis-master #once it invoke the deployment api it has to do something(it will create a deployment with the name)
  labels: #what is this label is all about
    app: redis #all the pod it is going to launch will label with this 
spec:
  #it will create three different pod
  selector:
    matchLabels: #going to be mapped using match value
      app: redis
      role: master
      tier: backend
  replicas: 1    

  template: #this is also called as deployment template what will my deploymetn will do
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend
